<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- VSOBuildNumber.targets, Version 1.5 - Sept, 2015 -->

  <!-- Copyright 2010-2015 Sly Gryphon. Subject to the Microsoft Reciprocal License. All other rights reserved. -->

  <!-- 
       VSO Build Number
       ================
       
       Updates build numbers in projects based on the VSO (or TFS XAML) build number.
  
  
       == Features ==
       
         - Generates build numbers in the format "Major.Minor.Build.Revision"
         - Major and Minor: Extracted from C# AssemblyFileVersion attributes in an 
           existing file (defaults to Properties\AssemblyInfo.cs).
         - Build and Revision: 
           - If running on VSO or TFS (XAML build), values taken from the default 
             BuildNumber format assigned by the server. The server BuildNumber, 
             with an extra prefix in TFS, consists of the date, plus an increasing 
             Revision number.
           - If running locally (developer build), the current date is used,
             with Revision set to 0.
           - The date is converted into a build number by joining to year offset
             from a base year, plus month, plus day. 
             e.g. 20150929 with year offset 2015 gives build 929
                  20150929 with year offset 2014 gives build 10929
         - Can updates C# version attributes in the info file (default AssemblyInfo.cs).
         - Can write build number into a plain Version.txt file in the project root
           (e.g. for copying to output as content along with web site files)
         - Reset the AssemblyInfo.cs file after the build (so it isn't
           constantly being updated in version control, including TFS 2012
           local workspaces or git).
         - If assembly info file needs to be Read Only (so that older TFS source
           control doesn't pick it up as a change) then can unset/set the
           read only flag on the file.
         - Also updates AssemblyInformationalVersion, useful for NuGet 
           packaging.
             
             
       == Note ==
       
       If you change the default build number format for the server (VSO or 
       TFS XAML), then you need to also adjust this script.
       
       The default formats, if you need to reset them, are:
       
       - VSO, Build number format = "$(date:yyyyMMdd)$(rev:.r)" 
       - TFS XAML, Build number format =  "$(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.r)"
             
           
       == Instructions ==
       
       1. Include VSOBuildNumber.targets in your solution, probably in
          a shared location at the root.
          
       2. Edit .csproj files to Import the VSOBuildNumber.targets project
          (adjust the path in the example below as needed).
       
       3. Add BeforeBuild target to the .csproj, with a dependency on
          the GetMajorMinorFromCSharpAssemblyInfoFile task to get the major/minor
          numbers, and then UpdateCSharpAssemblyInfoFile to generate the
          build number (build and revision parts) and update the file.
          
          You can also add a dependency on WriteProjectTextAssemblyVersionFile 
          to generate a text file.
          
          If you want to use a file other than the default (Properties/AssemblyInfo.cs),
          then set the <VersionInfoFile> property.
          
       4. Add AfterBuild target with a dependency on ResetCSharpAssemblyInfoFile
          to reset the changes (if you don't want to check in changes to AssemblyInfo.cs
          after every local build).
          
       5. Set the TFSBaseBuildYear property in the .csproj file (defaults to 2015).
          By setting the base year you will have nicely increasing version
          numbers.
          
          You should update the base year whenever you change the Major or
          Minor version number.
          
          NOTE: The maximum value supported for offset is 6, i.e. 7 years after
          the base year (due to maximum value of a version number component 
          of 65536). Provided you update the base year when changing Major or
          Minor you should never reach this limit.

       6. For VSO builds, in the Visual Studio Build step, add MSBuild Arguments:
       
            /p:BuildNumber="$(Build.BuildNumber)"
          
          If you don't add this argument, then the build will run as developer
          and not include the correct Revision number.
          
       7. For NuGet packaging support, add the following to AssemblyInfo.cs:
       
            [assembly: AssemblyInformationalVersion("1.0.0.0")]
          
          This will be replaced with the full version number from AssemblyFileVersion
          (otherwise, NuGet uses AssemblyVersion, which only has major/minor numbers).

       8. If your AssemblyInfo.cs file is usually read only (older TFS source 
          control), then you need to set the additional property 
          <TFSSetReadOnly>true</TFSSetReadOnly> to handle this.
                    
       NOTE: If you don't want to use GetMajorMinorFromCSharpAssemblyInfoFile,
       an alternative is to set the TFSMajorBuildNumber and TFSMinorBuildNumber
       properties in your .csproj file.
       
       Example to insert in your .csproj file (change TFSBaseBuildYear as desired):
       
       <PropertyGroup>
         <TFSBaseBuildYear>2015</TFSBaseBuildYear>
       </PropertyGroup>
       <Import Project="..\VSOBuildNumber.targets"/>
       <Target Name="BeforeBuild"
          DependsOnTargets="GetMajorMinorFromCSharpAssemblyInfoFile;WriteProjectTextAssemblyVersionFile;UpdateCSharpAssemblyInfoFile">
       </Target>
       <Target Name="AfterBuild"
          DependsOnTargets="ResetCSharpAssemblyInfoFile">
       </Target>

       Additional optional properties that can be used:

       <PropertyGroup>
         <VersionInfoFile>$(MSBuildProjectDirectory)\VersionInfo.cs</VersionInfoFile>
         <TFSMajorBuildNumber>1</TFSMajorBuildNumber>
         <TFSMinorBuildNumber>0</TFSMinorBuildNumber>
         <TFSSetReadOnly>true</TFSSetReadOnly>
       </PropertyGroup>

       -->

       <!-- Based on original work in Wintellect.TFSBuildNumber.Targets 
       by John Robbins (john@wintellect.com).
       
       From the original description:
       
       "A set of pure MSBuild 4.0 tasks that generate build version information 
       for a TFS 2010 Team Build in order to have your file versions match 
       exactly the TFS build numbers. Everything is in this file, you don't 
       need to install any other DLLs, assemblies, or magic on your TFS build 
       server. MSBuild 4.0 really is quite wonderful!"
       -->

  <!--
Microsoft Reciprocal License (MS-RL)

This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.

1. Definitions
 The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under U.S. copyright law.
 A "contribution" is the original software, or any additions or changes to the software.
 A "contributor" is any person that distributes its contribution under this license.
 "Licensed patents" are a contributor's patent claims that read directly on its contribution.

2. Grant of Rights
 (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
 (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.

3. Conditions and Limitations
 (A) Reciprocal Grants- For any file you distribute that contains code from the software (in source code or binary format), you must provide recipients the source code to that file along with a copy of this license, which license will govern that file. You may license other files that are entirely your own work and do not contain code from the software under any terms you choose.
 (B) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
 (C) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.
 (D) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.
 (E) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.
 (F) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.

  -->

  <PropertyGroup>
    <!-- Figure out where the TFS build tasks are. -->
    <TeamBuildRefPath Condition="'$(TeamBuildRefPath)'==''">$(VS100COMNTOOLS)..\IDE\PrivateAssemblies\</TeamBuildRefPath>
    <!-- Figure out where I'm being called from, TFS Build or a developer 
         machine. BuildUri and TeamFoundationServerUrl properties are the 
         ones that tell me I'm running under TFS Build.-->
    <WintellectBuildType>DEVELOPERBUILD</WintellectBuildType>
    <WintellectBuildType Condition="'$(BuildUri)'!='' and '$(TeamFoundationServerUrl)'!=''">TFSBUILD</WintellectBuildType>
    <WintellectBuildType Condition="'$(BuildNumber)'!=''">VSOBUILD</WintellectBuildType>
  </PropertyGroup>

  <!-- Set up the dependency on the InitializeBuildProperties task only 
       if running under TFS Build. -->
  <PropertyGroup Condition="'$(WintellectBuildType)'=='TFSBUILD'">
    <DependOnGetBuildProperties>GetBuildProperties</DependOnGetBuildProperties>
  </PropertyGroup>

  <PropertyGroup>
    <VersionInfoFile Condition="'$(VersionInfoFile)'==''">$(MSBuildProjectDirectory)\Properties\AssemblyInfo.cs</VersionInfoFile>
    <TFSBaseBuildYear Condition="'$(TFSBaseBuildYear)'==''">2010</TFSBaseBuildYear>
  </PropertyGroup>
  
  <!-- Use the GetBuildProperties task -->  
  <UsingTask TaskName="Microsoft.TeamFoundation.Build.Tasks.GetBuildProperties"
         AssemblyFile="$(TeamBuildRefPath)\Microsoft.TeamFoundation.Build.ProcessComponents.dll" />

  <Target Name="GetBuildProperties">
    <GetBuildProperties TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
                        BuildUri="$(BuildUri)" >
      <!-- Outputs are the initial values for the various properties of the build. -->
      <Output TaskParameter="BuildDefinitionName" PropertyName="BuildDefinitionName" />
      <Output TaskParameter="BuildDefinitionUri" PropertyName="BuildDefinitionUri" />
      <Output TaskParameter="BuildNumber" PropertyName="BuildNumber" />
    </GetBuildProperties>
    <Message Text="TFS Build definition '$(BuildDefinitionName)', number '$(BuildNumber)', uri '$(BuildDefinitionUri)'." />
  </Target>

  <!-- The TFSBuildFileVersion target builds the string suitable for using to 
       generate an acceptable AssemblyFileVersion attribute with the exact
       build being done by TFS Build 2010.
       
       This assumes a format of $(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.r) 
       for the build number format. Tweak if you are using a different format.
       
       For the code below, the $(BuildNumber) property from TFS Build 2010 will 
       look like: Dev Branch Daily Build_20091107.14
       The important properties output of this task are those that start with 
       TFS and are shown below.
       (Property)                 (Example Value)
       TFSFullBuildVersionString  3.1.21107.14
       TFSBuildNumber             21107
       TFSCalculatedYear          2
       TFSBuildYear               2009
       TFSBuildMonth              11
       TFSBuildDay                07
       TFSBuildRevision           14
       -->
  <Target Name="TFSBuildFileVersion"
          DependsOnTargets="$(DependOnGetBuildProperties)">

    <!-- Do the error checking to ensure the appropriate items are defined.-->
    <Error Condition="'$(TFSMajorBuildNumber)'==''"
           Text="TFSMajorBuildNumber is not defined."/>
    <Error Condition="'$(TFSMinorBuildNumber)'==''"
           Text="TFSMinorBuildNumber is not defined."/>

    <PropertyGroup>
      <!-- The separator string between the $(BuildDefinition) and the date 
           revision.-->
      <BuildDefSeparatorValue>_</BuildDefSeparatorValue>
      <!-- The separator between the date and revision.-->
      <DateVerSeparatorValue>.</DateVerSeparatorValue>
    </PropertyGroup>

    <Message Condition="'$(WintellectBuildType)'=='VSOBUILD'" Text="VSO BuildNumber '$(BuildNumber)'" />

    <!-- The calculations when run on a VSO Build Server.-->
    <PropertyGroup Condition="'$(WintellectBuildType)'=='VSOBUILD'">      
      <!-- Get the date and version. ex: 20091107.14-->
      <tmpFullDateAndVersion>$(BuildNumber)</tmpFullDateAndVersion>
      <!-- Find the position where the date and version separator splits 
           the string. -->
      <tmpDateVerSepPos>$(tmpFullDateAndVersion.IndexOf($(DateVerSeparatorValue)))</tmpDateVerSepPos>
      <!-- Grab the date. ex: 20081107-->
      <tmpFullBuildDate>$(tmpFullDateAndVersion.SubString(0,$(tmpDateVerSepPos)))</tmpFullBuildDate>
      <!-- Bump past the separator. -->
      <tmpVerStartPos>$([MSBuild]::Add($(tmpDateVerSepPos),1))</tmpVerStartPos>
      <!-- Get the revision string. ex: 14-->
      <TFSBuildRevision>$(tmpFullDateAndVersion.SubString($(tmpVerStartPos)))</TFSBuildRevision>
      <!-- Get the pieces so if someone wants to customize, they have them.-->
      <TFSBuildYear>$(tmpFullBuildDate.SubString(0,4))</TFSBuildYear>
      <TFSBuildMonth>$(tmpFullBuildDate.SubString(4,2))</TFSBuildMonth>
      <TFSBuildDay>$(tmpFullBuildDate.SubString(6,2))</TFSBuildDay>
    </PropertyGroup>

    <!-- The calculations when run on a TFS Build Server.-->
    <PropertyGroup Condition="'$(WintellectBuildType)'=='TFSBUILD'">
      <!-- Get where the timestamp starts-->
      <tmpStartPosition>$([MSBuild]::Add($(BuildDefinitionName.Length), $(BuildDefSeparatorValue.Length)))</tmpStartPosition>
      <!-- Get the date and version portion. ex: 20091107.14-->
      <tmpFullDateAndVersion>$(BuildNumber.Substring($(tmpStartPosition)))</tmpFullDateAndVersion>
      <!-- Find the position where the date and version separator splits 
           the string. -->
      <tmpDateVerSepPos>$(tmpFullDateAndVersion.IndexOf($(DateVerSeparatorValue)))</tmpDateVerSepPos>
      <!-- Grab the date. ex: 20081107-->
      <tmpFullBuildDate>$(tmpFullDateAndVersion.SubString(0,$(tmpDateVerSepPos)))</tmpFullBuildDate>
      <!-- Bump past the separator. -->
      <tmpVerStartPos>$([MSBuild]::Add($(tmpDateVerSepPos),1))</tmpVerStartPos>
      <!-- Get the revision string. ex: 14-->
      <TFSBuildRevision>$(tmpFullDateAndVersion.SubString($(tmpVerStartPos)))</TFSBuildRevision>
      <!-- Get the pieces so if someone wants to customize, they have them.-->
      <TFSBuildYear>$(tmpFullBuildDate.SubString(0,4))</TFSBuildYear>
      <TFSBuildMonth>$(tmpFullBuildDate.SubString(4,2))</TFSBuildMonth>
      <TFSBuildDay>$(tmpFullBuildDate.SubString(6,2))</TFSBuildDay>
    </PropertyGroup>

    <PropertyGroup Condition="'$(WintellectBuildType)'=='DEVELOPERBUILD'">
      <TFSBuildRevision>0</TFSBuildRevision>
      <TFSBuildYear>$([System.DateTime]::Now.Year.ToString("0000"))</TFSBuildYear>
      <TFSBuildMonth>$([System.DateTime]::Now.Month.ToString("00"))</TFSBuildMonth>
      <TFSBuildDay>$([System.DateTime]::Now.Day.ToString("00"))</TFSBuildDay>
    </PropertyGroup>

    <PropertyGroup>
      <!-- This is the Excel calculation "=MOD(year-2001,6)"-->
      <!-- That's what it looks like DevDiv is using for their calculations. -->
      <TFSCalculatedYear>$([MSBuild]::Subtract($(TFSBuildYear),$(TFSBaseBuildYear)))</TFSCalculatedYear>

      <tmpBuildNumber>$(TFSCalculatedYear)$(TFSBuildMonth)$(TFSBuildDay)</tmpBuildNumber>
      <TFSBuildNumber>$(tmpBuildNumber.TrimStart('0'))</TFSBuildNumber>
      <TFSFullBuildVersionString>$(TFSMajorBuildNumber).$(TFSMinorBuildNumber).$(TFSBuildNumber).$(TFSBuildRevision)</TFSFullBuildVersionString>
    </PropertyGroup>

    <Message Text="TFS Build Version $(TFSFullBuildVersionString) (build type $(WintellectBuildType))." />

    <!-- Do some error checking as empty properties screw up everything.-->
    <Error Condition="'$(TFSFullBuildVersionString)'==''"
           Text="Error building the TFSFullBuildVersionString property"/>
    <Error Condition="'$(TFSBuildNumber)'==''"
           Text="Error building the TFSBuildNumber property"/>
    <Error Condition="'$(TFSCalculatedYear)'==''"
           Text="Error building the TFSCalculatedYear property"/>
    <Error Condition="'$(TFSBuildDay)'==''"
           Text="Error building the TFSBuildDay property"/>
    <Error Condition="'$(TFSBuildMonth)'==''"
           Text="Error building the TFSBuildMonth property"/>
    <Error Condition="'$(TFSBuildYear)'==''"
           Text="Error building the TFSBuildYear property"/>
    <Error Condition="'$(TFSBuildRevision)'==''"
           Text="Error building the TFSBuildRevision property"/>
  </Target>

  <!-- This extracts the major/minor version from an existing 
     C-Sharp AssemblyInfo.cs file.
	 
	 This means that rather than specifying major/minor in the
	 .CSPROJ build file, all you need to do is add a before build
	 dependency to this target, plus the update target.
   -->

  <Target Name="GetMajorMinorFromCSharpAssemblyInfoFile">
    <CreateProperty Value='$(VersionInfoFile)'>
      <Output TaskParameter="Value" PropertyName="SourceAssemblyInfoFile" />
    </CreateProperty>
    <Message Text="Reading version number from file $(SourceAssemblyInfoFile)." />
    <CreateProperty	Value='$([System.IO.File]::ReadAllText("$(SourceAssemblyInfoFile)"))'>
      <Output
        TaskParameter="Value"
        PropertyName="OriginalAssemblyInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Match($(OriginalAssemblyInfo),"AssemblyFileVersion\s*\(\s*(.*?)\s*\)").Groups[1].Value)'>
      <Output
        TaskParameter="Value"
        PropertyName="AssemblyFileVersion" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Match($(AssemblyFileVersion),"^.(\d+)\.(\d+)\..*$").Groups[1].Value)'>
      <Output
        TaskParameter="Value"
        PropertyName="TFSMajorBuildNumber" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Match($(AssemblyFileVersion),"^.(\d+)\.(\d+)\..*$").Groups[2].Value)'>
      <Output
        TaskParameter="Value"
        PropertyName="TFSMinorBuildNumber" />
    </CreateProperty>
    <Message Text="Found version $(TFSMajorBuildNumber).$(TFSMinorBuildNumber)." />
  </Target>

  <!-- This target updates an existing C-Sharp AssemblyInfo.cs file.
	 
	 This means that rather than having to modify projects and
	 link a central SharedAssemblyInfo.cs file, you can simply
	 add a before build dependency to the update target and
	 the existing file will be updated.
	 
	 Note that the file is also changed back to read-only after
	 updating, so that it is not picked up as a changed file.
   -->

  <Target Name="UpdateCSharpAssemblyInfoFile"
          DependsOnTargets="TFSBuildFileVersion" >
    <CreateProperty Value='$(VersionInfoFile)'>
      <Output TaskParameter="Value" PropertyName="SourceAssemblyInfoFile" />
    </CreateProperty>
    <CreateProperty Value='$(SourceAssemblyInfoFile)'>
      <Output TaskParameter="Value" PropertyName="DestinationAssemblyInfoFile" />
    </CreateProperty>
    <CreateProperty Value='"$(TFSFullBuildVersionString)"'>
      <Output TaskParameter="Value" PropertyName="AssemblyFileVersion" />
    </CreateProperty>
    <CreateProperty Value='"$(TFSMajorBuildNumber).$(TFSMinorBuildNumber).0.0"'>
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <Exec Condition="Exists('$(DestinationAssemblyInfoFile)') and '$(TFSSetReadOnly)'=='true'" Command='attrib -R "$(DestinationAssemblyInfoFile)"' IgnoreExitCode='true' />
    <Message Text="Updating file '$(DestinationAssemblyInfoFile)' with file version $(AssemblyFileVersion)." />
    <CreateProperty	Value='$([System.IO.File]::ReadAllText("$(SourceAssemblyInfoFile)"))'>
      <Output
        TaskParameter="Value"
        PropertyName="OriginalAssemblyInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Replace($(OriginalAssemblyInfo),"AssemblyFileVersion\s*\(.*?\)","AssemblyFileVersion($(AssemblyFileVersion))"))'>
      <Output
        TaskParameter="Value"
        PropertyName="FileVersionUpdatedInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Replace($(FileVersionUpdatedInfo),"AssemblyInformationalVersion\s*\(.*?\)","AssemblyInformationalVersion($(AssemblyFileVersion))"))'>
      <Output
        TaskParameter="Value"
        PropertyName="InformationalVersionUpdatedInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Replace($(InformationalVersionUpdatedInfo),"AssemblyVersion\s*\(.*?\)","AssemblyVersion($(AssemblyVersion))"))'>
      <Output
        TaskParameter="Value"
        PropertyName="FullUpdatedInfo" />
    </CreateProperty>
    <WriteLinesToFile
      File="$(DestinationAssemblyInfoFile)"
      Lines='$(FullUpdatedInfo)'
      Overwrite="true" />
    <Exec Condition="'$(TFSSetReadOnly)'=='true'" Command='attrib +R "$(DestinationAssemblyInfoFile)"' />
  </Target>

  <!-- This resets the build and release numbers in AssemblyInfo.cs.
	 
   With local file based version control (including local workspaces in 
   VS2012) changes to AssemblyInfo.cs will be picked up for check in.
   
   If you don't want every build to trigger a change for these files,
   then reset the build and release numbers in the AfterBuild step.
   
   Note: You don't want to ignore these files completely, as you need 
   to include them as part of the project (and once added changes will 
   be detected).
   
   -->

  <Target Name="ResetCSharpAssemblyInfoFile"
        DependsOnTargets="TFSBuildFileVersion" >
    <CreateProperty Value='$(VersionInfoFile)'>
      <Output TaskParameter="Value" PropertyName="SourceAssemblyInfoFile" />
    </CreateProperty>
    <CreateProperty Value='$(SourceAssemblyInfoFile)'>
      <Output TaskParameter="Value" PropertyName="DestinationAssemblyInfoFile" />
    </CreateProperty>
    <CreateProperty Value='"$(TFSMajorBuildNumber).$(TFSMinorBuildNumber).0.0"'>
      <Output TaskParameter="Value" PropertyName="AssemblyFileVersion" />
    </CreateProperty>
    <CreateProperty Value='"$(TFSMajorBuildNumber).$(TFSMinorBuildNumber).0.0"'>
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <Exec Condition="Exists('$(DestinationAssemblyInfoFile)') and '$(TFSSetReadOnly)'=='true'" Command='attrib -R "$(DestinationAssemblyInfoFile)"' IgnoreExitCode='true' />
    <Message Text="Reseting file '$(DestinationAssemblyInfoFile)' to file version $(AssemblyFileVersion)." />
    <CreateProperty	Value='$([System.IO.File]::ReadAllText("$(SourceAssemblyInfoFile)"))'>
      <Output
        TaskParameter="Value"
        PropertyName="OriginalAssemblyInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Replace($(OriginalAssemblyInfo),"AssemblyFileVersion\s*\(.*?\)","AssemblyFileVersion($(AssemblyFileVersion))"))'>
      <Output
        TaskParameter="Value"
        PropertyName="FileVersionUpdatedInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Replace($(FileVersionUpdatedInfo),"AssemblyInformationalVersion\s*\(.*?\)","AssemblyInformationalVersion($(AssemblyFileVersion))"))'>
      <Output
        TaskParameter="Value"
        PropertyName="InformationalVersionUpdatedInfo" />
    </CreateProperty>
    <CreateProperty Value='$([System.Text.RegularExpressions.Regex]::Replace($(InformationalVersionUpdatedInfo),"AssemblyVersion\s*\(.*?\)","AssemblyVersion($(AssemblyVersion))"))'>
      <Output
        TaskParameter="Value"
        PropertyName="FullUpdatedInfo" />
    </CreateProperty>
    <WriteLinesToFile
      File="$(DestinationAssemblyInfoFile)"
      Lines='$(FullUpdatedInfo)'
      Overwrite="true" />
    <Exec Condition="'$(TFSSetReadOnly)'=='true'" Command='attrib +R "$(DestinationAssemblyInfoFile)"' />
  </Target>

  <!-- Writes to (or updates) a text file in the current project.
       This would usually be an existing file that can then be copied
       to the output directory (as content), e.g. so you can tell the
       deployed version of web site files. -->
  
  <Target Name="WriteProjectTextAssemblyVersionFile"
        DependsOnTargets="TFSBuildFileVersion">
    <CreateProperty Value='$(MSBuildProjectDirectory)\Version.txt'>
      <Output TaskParameter="Value" PropertyName="ProjectTextVersionFile" />
    </CreateProperty>
    <Exec Condition="Exists('$(ProjectTextVersionFile)') and '$(TFSSetReadOnly)'=='true'" Command='attrib -R "$(ProjectTextVersionFile)"' IgnoreExitCode='true' />
    <Message Text="Updating file '$(ProjectTextVersionFile)' with file version $(TFSFullBuildVersionString)." />
    <ItemGroup>
      <TXTLines Include="$(TFSFullBuildVersionString)"/>
    </ItemGroup>
    <WriteLinesToFile Overwrite="true"
                      File="$(ProjectTextVersionFile)"
                      Lines="@(TXTLines)"/>
    <Exec Condition="'$(TFSSetReadOnly)'=='true'" Command='attrib +R "$(ProjectTextVersionFile)"' />
  </Target>

</Project>